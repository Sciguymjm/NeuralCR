{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["onnx","require","sess","InferenceSession","loadingModelPromise","loadModel","App","size_map","selected_columns","columns","map","group","flat","state","values","preset","cr","clear","setState","size","Header","h2","h1","this","Number","toFixed","Math","round","h5","onChange","event","changePreset","value","placeholder","monsters","names","name","i","Option","toString","onClick","Container","gap","justify","column","input","indexOf","endsWith","changeEvent","checked","id","undefined","Object","keys","type","xs","md","href","color","parseInt","target","predict","idx","forEach","data","console","log","includes","push","parseFloat","tensor","Tensor","Float32Array","length","run","then","outputMap","predictions","next","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.751256db.chunk.js","sourcesContent":["import './App.css'\nimport React from 'react'\nimport monsters from './monsters.json'\n\nimport {Text, Page, Select, Input, Checkbox, Grid, Divider, Link} from '@geist-ui/react'\n\nconst onnx = require('onnxjs')\nconst sess = new onnx.InferenceSession()\nconst loadingModelPromise = sess.loadModel(\"./onnx_model.onnx\")\n\nclass App extends React.Component {\n    size_map = {\n        'Tiny': 0,\n        'Small': 1,\n        'Medium': 2,\n        'Large': 3,\n        'Huge': 4,\n        'Gargantuan': 5\n    }\n    // selected_columns = ['hp', 'ac', 'speed', 'flies', 'save', 'toHit',\n    //     'str', 'dex', 'con', 'int', 'wis', 'cha', 'legendary',\n    //     'damageTags', 'conditionInflict', 'size',\n    //     'immune_cold', 'immune_acid',\n    //     'immune_lightning', 'immune_poison', 'immune_fire', 'immune_psychic',\n    //     'immune_bludgeoning', 'immune_piercing', 'immune_slashing',\n    //     'immune_necrotic', 'immune_thunder', 'immune_force', 'immune_radiant',\n    //     'resist_cold', 'resist_acid', 'resist_lightning', 'resist_poison',\n    //     'resist_fire', 'resist_psychic', 'resist_bludgeoning',\n    //     'resist_piercing', 'resist_slashing', 'resist_necrotic',\n    //     'resist_thunder', 'resist_force', 'resist_radiant']\n    selected_columns = [\n        {\n            \"title\": \"Basic\",\n            \"names\": ['HP (average)', 'Armor Class', 'Speed (max)', 'Has fly speed', 'Number of saves proficient in', 'Max + to hit']\n        },\n        {\n            \"title\": \"Attributes\",\n            \"names\": [\n                'Str', 'Dex', 'Con', 'Int', 'Wis', 'Cha', 'Legendary',\n                'Unique damage types inflicted', 'Unique conditions inflicted', 'Size'\n            ]\n        },\n        {\n            \"title\": \"Immunities\",\n            \"names\": [\n                'Cold damage', 'Acid damage', 'Lightning damage', 'Poison damage',\n                'Fire damage', 'Psychic damage', 'Bludgeoning damage',\n                'Piercing damage', 'Slashing damage', 'Necrotic damage',\n                'Thunder damage', 'Force damage', 'Radiant damage',\n            ]\n        },\n        {\n            \"title\": \"Resistances\",\n            \"names\": [\n                'Cold damage', 'Acid damage', 'Lightning damage', 'Poison damage',\n                'Fire damage', 'Psychic damage', 'Bludgeoning damage',\n                'Piercing damage', 'Slashing damage', 'Necrotic damage',\n                'Thunder damage', 'Force damage', 'Radiant damage']\n        }\n    ]\n    columns = this.selected_columns.map((group) => group[\"names\"]).flat(1)\n    state = {\n        values: {},\n        preset: null,\n        cr: 0\n    }\n\n    render() {\n        return (\n            <Page size=\"mini\">\n                <Page.Header>\n                    <Text h2>Neural Challenge Rating</Text>\n                </Page.Header>\n                <Text h1>{this.state.cr < 1 ? Number(this.state.cr).toFixed(2) : Math.round(this.state.cr)}</Text>\n                <Text h5>predicted challenge rating</Text>\n                <Divider/>\n                <Select onChange={(event) => this.changePreset(event)}\n                        value={this.state.preset} placeholder=\"Select SRD monster preset...\">\n                    {monsters.names.map((name, i) => <Select.Option value={i.toString()}>{name}</Select.Option>)}\n                </Select>\n                <button onClick={this.clear}>Clear</button>\n                {this.selected_columns.map((group) => {\n                    return <>\n                        <Divider>{group[\"title\"]}</Divider>\n                        <Grid.Container gap={2} justify=\"center\">\n                            {group[\"names\"].map((column) => {\n                                let input\n                                if ([\"Has fly speed\", \"Legendary\"].indexOf(column) !== -1\n                                    || column.endsWith(\"damage\")) {\n                                    input = <Checkbox name={column}\n                                                      onChange={(event) =>\n                                                          this.changeEvent(event, column)}\n                                                      checked={this.state.values[column] === 1}/>\n                                } else if (column === \"Size\") {\n                                    input = <Select id=\"size\" name=\"size\" onChange={(event) =>\n                                        this.changeEvent(event, column)}\n                                                    value={this.state.values[column] === undefined ? \"0\" : this.state.values[column].toString()}>\n                                        {Object.keys(this.size_map).map((size) => {\n                                            return <Select.Option\n                                                value={this.size_map[size].toString()}>{size}</Select.Option>\n                                        })}\n                                    </Select>\n                                } else {\n                                    input = <Input name={column} type={\"number\"} onChange={(event) =>\n                                        this.changeEvent(event, column)}\n                                                   value={this.state.values[column] === undefined ? 0 : this.state.values[column]}/>\n                                }\n                                return <Grid xs={24} md={12} key={column}>\n                                    <Grid xs key={\"column\"}>{column}</Grid>\n                                    <Grid xs key={\"input\"}>{input}</Grid>\n                                </Grid>\n                            })}\n\n                        </Grid.Container>\n                    </>\n                })}\n\n                <Divider/>\n                <Text>Made by <Link href={\"https://twitter.com/Sciguymjm\"} color>Matthew Mage</Link></Text>\n            </Page>\n        )\n    }\n\n    changeEvent(event, column) {\n        const {values} = this.state\n        if (typeof event === \"string\") {\n            values[column] = parseInt(event)\n        }\n        else if (event.target.value === undefined) {\n            values[column] = event.target.checked\n        } else {\n            values[column] = event.target.value\n        }\n        this.setState({values}, () => {\n            this.predict()\n        })\n    }\n\n    changePreset(event) {\n        if (event === null)\n            return\n        const idx = parseInt(event)\n        if (idx === -1)\n            return\n        const values = {}\n\n        this.columns.forEach((column, i) => {\n            if ([\"flies\", \"legendary\"].indexOf(column) !== -1\n                || column.indexOf(\"resist\") !== -1\n                || column.indexOf(\"immune\") !== -1) {\n                values[column] = monsters.data[idx][i] === 1.0\n            } else {\n                values[column] = monsters.data[idx][i]\n            }\n        })\n        this.setState({values, preset: idx.toString()}, () => {\n            this.predict()\n            console.log(this.state.values)\n        })\n    }\n\n    clear = () => {\n        this.setState({values: {}, preset: null, cr: 0})\n    }\n\n    predict() {\n        const {values} = this.state\n        const input = []\n        this.columns.forEach((column) => {\n            if (Object.keys(values).includes(column)) {\n                if (typeof values[column] == \"boolean\") {\n                    input.push(values[column] ? 1 : 0)\n                } else {\n                    input.push(parseFloat(values[column]))\n                }\n            } else {\n                input.push(0.0)\n            }\n        })\n        const tensor = new onnx.Tensor(new Float32Array(input), \"float32\", [1, this.columns.length])\n\n        sess.run([tensor]).then((outputMap) => {\n            const outputTensor = outputMap.values().next().value\n            const predictions = outputTensor.data\n            this.setState({cr: predictions})\n        })\n\n    }\n}\n\nloadingModelPromise.then(() => {\n    console.log(\"Model loaded\")\n    console.log(monsters)\n})\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport {CssBaseline, GeistProvider} from '@geist-ui/react'\n\nReactDOM.render(\n    <React.StrictMode>\n        <GeistProvider>\n            <CssBaseline/>\n            <App/>\n        </GeistProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}
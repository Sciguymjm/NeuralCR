{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["onnx","require","sess","InferenceSession","loadingModelPromise","loadModel","App","size_map","selected_columns","state","values","cr","className","Math","round","this","map","column","input","indexOf","name","type","onChange","event","changeEvent","id","Object","keys","size","value","target","checked","setState","predict","forEach","includes","push","parseFloat","tensor","Tensor","Float32Array","length","run","then","outputMap","predictions","next","data","React","Component","console","log","document","body","addEventListener","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e674a5d4.chunk.js","sourcesContent":["import './App.css'\nimport React from 'react'\n\nconst onnx = require('onnxjs')\nconst sess = new onnx.InferenceSession()\nconst loadingModelPromise = sess.loadModel(\"./onnx_model.onnx\")\n\nclass App extends React.Component {\n    size_map = {\n        'Tiny': 0,\n        'Small': 1,\n        'Medium': 2,\n        'Large': 3,\n        'Huge': 4,\n        'Gargantuan': 5\n    }\n    selected_columns = ['hp', 'ac', 'speed', 'flies', 'save', 'toHit',\n        'str', 'dex', 'con', 'int', 'wis', 'cha', 'legendary',\n        'damageTags', 'conditionInflict', 'size',\n        'immune_cold', 'immune_acid',\n        'immune_lightning', 'immune_poison', 'immune_fire', 'immune_psychic',\n        'immune_bludgeoning', 'immune_piercing', 'immune_slashing',\n        'immune_necrotic', 'immune_thunder', 'immune_force', 'immune_radiant',\n        'resist_cold', 'resist_acid', 'resist_lightning', 'resist_poison',\n        'resist_fire', 'resist_psychic', 'resist_bludgeoning',\n        'resist_piercing', 'resist_slashing', 'resist_necrotic',\n        'resist_thunder', 'resist_force', 'resist_radiant']\n    state = {\n        values: {},\n        cr: 0\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                {/*<img src={logo} className=\"App-logo\" alt=\"logo\" />*/}\n                <h1>{Math.round(this.state.cr)}</h1>\n                {this.selected_columns.map((column) => {\n                    let input\n                    if ([\"flies\", \"legendary\"].indexOf(column) !== -1\n                        || column.indexOf(\"resist\") !== -1\n                        || column.indexOf(\"immune\") !== -1) {\n                        input = <input name={column} type={\"checkbox\"}\n                                       onChange={(event) =>\n                                           this.changeEvent(event, column)}/>\n                    } else if (column === \"size\") {\n                        input = <select id=\"size\" name=\"size\" onChange={(event) =>\n                            this.changeEvent(event, column)}>\n                            {Object.keys(this.size_map).map((size) => {\n                                return <option value={this.size_map[size]}>{size}</option>\n                            })}\n                        </select>\n                    } else {\n                        input = <input name={column} type={\"number\"} onChange={(event) =>\n                            this.changeEvent(event, column)}/>\n                    }\n                    return <p key={column}>\n                        <span>{column}</span>\n                        {input}\n                    </p>\n                })}\n            </div>\n        )\n    }\n\n    changeEvent(event, column) {\n        const {values} = this.state\n        if (event.target.type === \"checkbox\") {\n            values[column] = event.target.checked\n        } else {\n            values[column] = event.target.value\n        }\n        this.setState({values}, () => {\n            this.predict()\n        })\n    }\n\n    predict() {\n        const {values} = this.state\n        const input = []\n        this.selected_columns.forEach((column) => {\n            if (Object.keys(values).includes(column)) {\n                if (typeof values[column] == \"boolean\") {\n                    input.push(values[column] ? 1 : 0)\n                } else {\n                    input.push(parseFloat(values[column]))\n                }\n            } else {\n                input.push(0.0)\n            }\n        })\n        const tensor = new onnx.Tensor(new Float32Array(input), \"float32\", [1, this.selected_columns.length])\n\n        sess.run([tensor]).then((outputMap) => {\n            const outputTensor = outputMap.values().next().value\n            const predictions = outputTensor.data\n            this.setState({cr: predictions})\n        })\n\n    }\n}\n\nfunction predict() {\n\n}\n\nloadingModelPromise.then(() => {\n    console.log(\"Model loaded\")\n    document.body.addEventListener(\"mousedown\", predict)\n})\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
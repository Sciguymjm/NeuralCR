{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["onnx","require","sess","InferenceSession","loadingModelPromise","loadModel","App","size_map","selected_columns","state","values","preset","cr","clear","setState","className","Math","round","this","id","name","onChange","event","changePreset","value","monsters","names","map","i","onClick","column","input","indexOf","type","changeEvent","checked","undefined","Object","keys","size","target","predict","idx","forEach","console","log","data","parseInt","includes","push","parseFloat","tensor","Tensor","Float32Array","length","run","then","outputMap","predictions","next","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f9cb0d92.chunk.js","sourcesContent":["import './App.css'\nimport React from 'react'\nimport monsters from './monsters.json'\n\nconst onnx = require('onnxjs')\nconst sess = new onnx.InferenceSession()\nconst loadingModelPromise = sess.loadModel(\"./onnx_model.onnx\")\n\nclass App extends React.Component {\n    size_map = {\n        'Tiny': 0,\n        'Small': 1,\n        'Medium': 2,\n        'Large': 3,\n        'Huge': 4,\n        'Gargantuan': 5\n    }\n    selected_columns = ['hp', 'ac', 'speed', 'flies', 'save', 'toHit',\n        'str', 'dex', 'con', 'int', 'wis', 'cha', 'legendary',\n        'damageTags', 'conditionInflict', 'size',\n        'immune_cold', 'immune_acid',\n        'immune_lightning', 'immune_poison', 'immune_fire', 'immune_psychic',\n        'immune_bludgeoning', 'immune_piercing', 'immune_slashing',\n        'immune_necrotic', 'immune_thunder', 'immune_force', 'immune_radiant',\n        'resist_cold', 'resist_acid', 'resist_lightning', 'resist_poison',\n        'resist_fire', 'resist_psychic', 'resist_bludgeoning',\n        'resist_piercing', 'resist_slashing', 'resist_necrotic',\n        'resist_thunder', 'resist_force', 'resist_radiant']\n    state = {\n        values: {},\n        preset: -1,\n        cr: 0\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                {/*<img src={logo} className=\"App-logo\" alt=\"logo\" />*/}\n                <h1>{Math.round(this.state.cr)}</h1>\n                <select id=\"preset\" name=\"preset\" onChange={(event) => this.changePreset(event)}\n                value={this.state.preset}>\n                    <option value={-1}>Select SRD monster preset...</option>\n                    {monsters.names.map((name, i) => {\n                        return <option value={i}>{name}</option>\n                    })}\n                </select>\n                <button onClick={this.clear}>Clear</button>\n                {this.selected_columns.map((column) => {\n                    let input\n                    if ([\"flies\", \"legendary\"].indexOf(column) !== -1\n                        || column.indexOf(\"resist\") !== -1\n                        || column.indexOf(\"immune\") !== -1) {\n                        input = <input name={column} type={\"checkbox\"}\n                                       onChange={(event) =>\n                                           this.changeEvent(event, column)}\n                                       checked={this.state.values[column]}/>\n                    } else if (column === \"size\") {\n                        input = <select id=\"size\" name=\"size\" onChange={(event) =>\n                            this.changeEvent(event, column)}\n                                        value={this.state.values[column] === undefined ? 0 : this.state.values[column]}>\n                            {Object.keys(this.size_map).map((size) => {\n                                return <option value={this.size_map[size]}>{size}</option>\n                            })}\n                        </select>\n                    } else {\n                        input = <input name={column} type={\"number\"} onChange={(event) =>\n                            this.changeEvent(event, column)}\n                                       value={this.state.values[column] === undefined ? 0 : this.state.values[column]}/>\n                    }\n                    return <p key={column}>\n                        <span>{column}</span>\n                        {input}\n                    </p>\n                })}\n            </div>\n        )\n    }\n\n    changeEvent(event, column) {\n        const {values} = this.state\n        if (event.target.type === \"checkbox\") {\n            values[column] = event.target.checked\n        } else {\n            values[column] = event.target.value\n        }\n        this.setState({values}, () => {\n            this.predict()\n        })\n    }\n\n    changePreset(event) {\n        const idx = event.target.value\n        if (idx === \"-1\")\n            return\n        const values = {}\n        this.selected_columns.forEach((column, i) => {\n            if ([\"flies\", \"legendary\"].indexOf(column) !== -1\n                || column.indexOf(\"resist\") !== -1\n                || column.indexOf(\"immune\") !== -1) {\n                console.log(column, monsters.data[parseInt(idx)][i], monsters.data[parseInt(idx)][i] === 1.0)\n                values[column] = monsters.data[parseInt(idx)][i] === 1.0\n            } else {\n                values[column] = monsters.data[parseInt(idx)][i]\n            }\n        })\n        this.setState({values, preset: idx}, () => {\n            this.predict()\n        })\n    }\n\n    clear = () => {\n        this.setState({values: {}, preset: -1, cr: 0})\n    }\n\n    predict() {\n        const {values} = this.state\n        const input = []\n        this.selected_columns.forEach((column) => {\n            if (Object.keys(values).includes(column)) {\n                if (typeof values[column] == \"boolean\") {\n                    input.push(values[column] ? 1 : 0)\n                } else {\n                    input.push(parseFloat(values[column]))\n                }\n            } else {\n                input.push(0.0)\n            }\n        })\n        const tensor = new onnx.Tensor(new Float32Array(input), \"float32\", [1, this.selected_columns.length])\n\n        sess.run([tensor]).then((outputMap) => {\n            const outputTensor = outputMap.values().next().value\n            const predictions = outputTensor.data\n            this.setState({cr: predictions})\n        })\n\n    }\n}\n\nloadingModelPromise.then(() => {\n    console.log(\"Model loaded\")\n    console.log(monsters)\n})\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}